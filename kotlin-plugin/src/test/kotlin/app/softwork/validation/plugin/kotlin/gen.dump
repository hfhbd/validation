CONSTRUCTOR visibility:public <> (s:kotlin.String, d:kotlin.String?) returnType:<root>.A [primary]
  VALUE_PARAMETER name:s index:0 type:kotlin.String
  VALUE_PARAMETER name:d index:1 type:kotlin.String?
  BLOCK_BODY
    DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () [primary] declared in kotlin.Any'
  BLOCK type=kotlin.Unit origin=SYNTHESIZED_INIT_BLOCK
        WHEN type=kotlin.Unit origin=IF
          BRANCH
            if: CALL 'public final fun less (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
              arg0: CALL 'public open fun <get-length> (): kotlin.Int declared in kotlin.String' type=kotlin.Int origin=GET_PROPERTY
                $this: GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:s type:kotlin.String visibility:private [final]' type=kotlin.String origin=null
                  receiver: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
              arg1: CONST Int type=kotlin.Int value=2
            then: BLOCK type=kotlin.Unit origin=null
              THROW type=kotlin.Nothing
                CONSTRUCTOR_CALL 'public constructor <init> (p0: @[FlexibleNullability] kotlin.String?) declared in java.lang.IllegalArgumentException' type=java.lang.IllegalArgumentException origin=null
                  p0: CALL 'public final fun toString (): kotlin.String declared in java.lang.StringBuilder' type=kotlin.String origin=null
                    $this: CALL 'public final fun append (value: kotlin.String?): java.lang.StringBuilder declared in java.lang.StringBuilder' type=java.lang.StringBuilder origin=null
                      $this: CALL 'public final fun append (value: kotlin.String?): java.lang.StringBuilder declared in java.lang.StringBuilder' type=java.lang.StringBuilder origin=null
                        $this: CONSTRUCTOR_CALL 'public constructor <init> () declared in java.lang.StringBuilder' type=java.lang.StringBuilder origin=null
                        value: CONST String type=kotlin.String value="s.length >= 2, was "
                      value: GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:s type:kotlin.String visibility:private [final]' type=kotlin.String origin=null
                        receiver: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
        WHEN type=kotlin.Unit origin=IF
          BRANCH
            if: CALL 'public final fun greater (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=GT
              arg0: CALL 'public open fun <get-length> (): kotlin.Int declared in kotlin.String' type=kotlin.Int origin=GET_PROPERTY
                $this: GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:s type:kotlin.String visibility:private [final]' type=kotlin.String origin=null
                  receiver: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
              arg1: CONST Int type=kotlin.Int value=4
            then: BLOCK type=kotlin.Unit origin=null
              THROW type=kotlin.Nothing
                CONSTRUCTOR_CALL 'public constructor <init> (p0: @[FlexibleNullability] kotlin.String?) declared in java.lang.IllegalArgumentException' type=java.lang.IllegalArgumentException origin=null
                  p0: CALL 'public final fun toString (): kotlin.String declared in java.lang.StringBuilder' type=kotlin.String origin=null
                    $this: CALL 'public final fun append (value: kotlin.String?): java.lang.StringBuilder declared in java.lang.StringBuilder' type=java.lang.StringBuilder origin=null
                      $this: CALL 'public final fun append (value: kotlin.String?): java.lang.StringBuilder declared in java.lang.StringBuilder' type=java.lang.StringBuilder origin=null
                        $this: CONSTRUCTOR_CALL 'public constructor <init> () declared in java.lang.StringBuilder' type=java.lang.StringBuilder origin=null
                        value: CONST String type=kotlin.String value="s.length <= 4, was "
                      value: GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:s type:kotlin.String visibility:private [final]' type=kotlin.String origin=null
                        receiver: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
        WHEN type=kotlin.Unit origin=IF
          BRANCH
            if: CALL 'public final fun ANDAND (arg0: kotlin.Boolean, arg1: kotlin.Boolean): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=null
              arg0: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
                $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
                  arg0: GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:d type:kotlin.String? visibility:private [final]' type=kotlin.String? origin=null
                    receiver: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
                  arg1: CONST Null type=kotlin.Nothing? value=null
              arg1: CALL 'public final fun less (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
                arg0: CALL 'public open fun <get-length> (): kotlin.Int declared in kotlin.String' type=kotlin.Int origin=GET_PROPERTY
                  $this: GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:d type:kotlin.String? visibility:private [final]' type=kotlin.String? origin=null
                    receiver: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
                arg1: CONST Int type=kotlin.Int value=2
            then: BLOCK type=kotlin.Unit origin=null
              THROW type=kotlin.Nothing
                CONSTRUCTOR_CALL 'public constructor <init> (p0: @[FlexibleNullability] kotlin.String?) declared in java.lang.IllegalArgumentException' type=java.lang.IllegalArgumentException origin=null
                  p0: CALL 'public final fun toString (): kotlin.String declared in java.lang.StringBuilder' type=kotlin.String origin=null
                    $this: CALL 'public final fun append (value: kotlin.String?): java.lang.StringBuilder declared in java.lang.StringBuilder' type=java.lang.StringBuilder origin=null
                      $this: CALL 'public final fun append (value: kotlin.String?): java.lang.StringBuilder declared in java.lang.StringBuilder' type=java.lang.StringBuilder origin=null
                        $this: CONSTRUCTOR_CALL 'public constructor <init> () declared in java.lang.StringBuilder' type=java.lang.StringBuilder origin=null
                        value: CONST String type=kotlin.String value="d.length >= 2, was "
                      value: GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:d type:kotlin.String? visibility:private [final]' type=kotlin.String? origin=null
                        receiver: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
        WHEN type=kotlin.Unit origin=IF
          BRANCH
            if: CALL 'public final fun ANDAND (arg0: kotlin.Boolean, arg1: kotlin.Boolean): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=null
              arg0: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
                $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
                  arg0: GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:d type:kotlin.String? visibility:private [final]' type=kotlin.String? origin=null
                    receiver: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
                  arg1: CONST Null type=kotlin.Nothing? value=null
              arg1: CALL 'public final fun greater (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=GT
                arg0: CALL 'public open fun <get-length> (): kotlin.Int declared in kotlin.String' type=kotlin.Int origin=GET_PROPERTY
                  $this: GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:d type:kotlin.String? visibility:private [final]' type=kotlin.String? origin=null
                    receiver: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
                arg1: CONST Int type=kotlin.Int value=4
            then: BLOCK type=kotlin.Unit origin=null
              THROW type=kotlin.Nothing
                CONSTRUCTOR_CALL 'public constructor <init> (p0: @[FlexibleNullability] kotlin.String?) declared in java.lang.IllegalArgumentException' type=java.lang.IllegalArgumentException origin=null
                  p0: CALL 'public final fun toString (): kotlin.String declared in java.lang.StringBuilder' type=kotlin.String origin=null
                    $this: CALL 'public final fun append (value: kotlin.String?): java.lang.StringBuilder declared in java.lang.StringBuilder' type=java.lang.StringBuilder origin=null
                      $this: CALL 'public final fun append (value: kotlin.String?): java.lang.StringBuilder declared in java.lang.StringBuilder' type=java.lang.StringBuilder origin=null
                        $this: CONSTRUCTOR_CALL 'public constructor <init> () declared in java.lang.StringBuilder' type=java.lang.StringBuilder origin=null
                        value: CONST String type=kotlin.String value="d.length <= 4, was "
                      value: GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:d type:kotlin.String? visibility:private [final]' type=kotlin.String? origin=null
                        receiver: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
