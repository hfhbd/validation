Subject: [PATCH] WIP
---
Index: kotlin-plugin/src/main/kotlin/app/softwork/validation/plugin/kotlin/ValidationTransformer.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/kotlin-plugin/src/main/kotlin/app/softwork/validation/plugin/kotlin/ValidationTransformer.kt b/kotlin-plugin/src/main/kotlin/app/softwork/validation/plugin/kotlin/ValidationTransformer.kt
--- a/kotlin-plugin/src/main/kotlin/app/softwork/validation/plugin/kotlin/ValidationTransformer.kt	(revision 249ed02a91da59b259bb2ca99a0994536417bd69)
+++ b/kotlin-plugin/src/main/kotlin/app/softwork/validation/plugin/kotlin/ValidationTransformer.kt	(revision 1347b4b8305b8fb0fdfe5318593ba2effbca7473)
@@ -1,6 +1,7 @@
 package app.softwork.validation.plugin.kotlin
 
 import org.jetbrains.kotlin.backend.common.extensions.*
+import org.jetbrains.kotlin.backend.common.lower.*
 import org.jetbrains.kotlin.fir.extensions.*
 import org.jetbrains.kotlin.ir.*
 import org.jetbrains.kotlin.ir.builders.*
@@ -8,6 +9,7 @@
 import org.jetbrains.kotlin.ir.expressions.*
 import org.jetbrains.kotlin.ir.symbols.*
 import org.jetbrains.kotlin.ir.symbols.impl.*
+import org.jetbrains.kotlin.ir.types.*
 import org.jetbrains.kotlin.ir.util.*
 import org.jetbrains.kotlin.ir.visitors.*
 
@@ -21,13 +23,12 @@
     private val illegalArgumentExceptionSymbol = pluginContext.symbols.irBuiltIns.illegalArgumentExceptionSymbol
     private val unit = pluginContext.symbols.irBuiltIns.unitClass
     private val unitType = pluginContext.symbols.irBuiltIns.unitType
+    private val booleanType = pluginContext.symbols.irBuiltIns.booleanType
     private val less =
         pluginContext.symbols.irBuiltIns.lessFunByOperandType[pluginContext.symbols.irBuiltIns.intClass]!!
     private val greater =
         pluginContext.symbols.irBuiltIns.greaterFunByOperandType[pluginContext.symbols.irBuiltIns.intClass]!!
-    private val STRING = pluginContext.irBuiltIns.stringClass
-    private val STRINGType = pluginContext.irBuiltIns.stringType
-    private val length = STRING.getPropertyGetter("length")!!
+    private val STRINGlength = pluginContext.irBuiltIns.stringClass.getPropertyGetter("length")!!
 
     private var newInitBlock: IrAnonymousInitializer? = null
 
@@ -70,7 +71,7 @@
 
     override fun visitProperty(declaration: IrProperty): IrProperty {
         val type = declaration.getter!!.returnType
-        if (type != STRINGType) {
+        if (!type.isStringClassType()) {
             return declaration
         }
         declaration.getAnnotation(MinLength)?.addInit(
@@ -110,16 +111,32 @@
                 declaration.getter!!
             ).apply {
                 dispatchReceiver = irGet(klass.thisReceiver!!)
+                origin = IrStatementOrigin.GET_PROPERTY
+            }
+            val isNullable = declaration.getter!!.returnType.isNullable()
+            val checkLength = irCall(comp).apply {
+                putValueArgument(0, irCall(STRINGlength).apply {
+                    dispatchReceiver = prop
+                })
+                putValueArgument(1, value)
             }
             val newInitBlock = newInitBlock ?: return@with
             newInitBlock.body.statements += irIfThen(
                 type = unitType,
-                condition = irCall(comp).apply {
-                    putValueArgument(0, irCall(length).apply {
-                        dispatchReceiver = prop
-                    })
-                    putValueArgument(1, value)
-                },
+                condition = if (isNullable) {
+                    irIfThen(
+                        type = booleanType,
+                        condition = irNot(
+                            irEqualsNull(
+                                prop
+                            ),
+                        ),
+                        thenPart = checkLength
+                    ).apply {
+                        origin = IrStatementOrigin.ANDAND
+                        branches.add(irBranch(irTrue(), irFalse()))
+                    }
+                } else checkLength,
                 thenPart = irCall(
                     illegalArgumentExceptionSymbol,
                 ).apply {
Index: kotlin-plugin/src/test/kotlin/app/softwork/validation/plugin/kotlin/CompilerTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/kotlin-plugin/src/test/kotlin/app/softwork/validation/plugin/kotlin/CompilerTest.kt b/kotlin-plugin/src/test/kotlin/app/softwork/validation/plugin/kotlin/CompilerTest.kt
--- a/kotlin-plugin/src/test/kotlin/app/softwork/validation/plugin/kotlin/CompilerTest.kt	(revision 249ed02a91da59b259bb2ca99a0994536417bd69)
+++ b/kotlin-plugin/src/test/kotlin/app/softwork/validation/plugin/kotlin/CompilerTest.kt	(revision 1347b4b8305b8fb0fdfe5318593ba2effbca7473)
@@ -1,8 +1,7 @@
 package app.softwork.validation.plugin.kotlin
 
-import com.tschuchort.compiletesting.SourceFile
-import kotlin.test.Test
-import kotlin.test.assertEquals
+import com.tschuchort.compiletesting.*
+import kotlin.test.*
 
 class CompilerTest {
     @Test
@@ -39,7 +38,9 @@
 }
 			""",
         )
+
         val blocks = jvmCompile(source)
+        assertEquals(4, blocks.size)
         assertEquals(
             """WHEN type=kotlin.Unit origin=IF
   BRANCH
@@ -55,7 +56,8 @@
         CONST String type=kotlin.String value=", was "
         CALL 'public final fun <get-s> (): kotlin.String declared in <root>.A' type=kotlin.String origin=null
           ${'$'}this: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
-""", blocks[0]
+""",
+            blocks[0].replace("\r\n", "\n")
         )
         assertEquals(
             """WHEN type=kotlin.Unit origin=IF
@@ -72,8 +74,64 @@
         CONST String type=kotlin.String value=", was "
         CALL 'public final fun <get-s> (): kotlin.String declared in <root>.A' type=kotlin.String origin=null
           ${'$'}this: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
-""", blocks[1]
+""",
+            blocks[1].replace("\r\n", "\n")
+        )
+        assertEquals(
+            """WHEN type=kotlin.Unit origin=IF
+  BRANCH
+    if: WHEN type=kotlin.Boolean origin=ANDAND
+      BRANCH
+        if: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
+          ${'$'}this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
+            arg0: CALL 'public final fun <get-d> (): kotlin.String? declared in <root>.A' type=kotlin.String? origin=GET_PROPERTY
+              ${'$'}this: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+            arg1: CONST Null type=kotlin.Nothing? value=null
+        then: CALL 'public final fun less (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
+          arg0: CALL 'public open fun <get-length> (): kotlin.Int declared in kotlin.String' type=kotlin.Int origin=GET_PROPERTY
+            ${'$'}this: CALL 'public final fun <get-d> (): kotlin.String? declared in <root>.A' type=kotlin.String? origin=GET_PROPERTY
+              ${'$'}this: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+          arg1: CONST Int type=kotlin.Int value=2
+      BRANCH
+        if: CONST Boolean type=kotlin.Boolean value=true
+        then: CONST Boolean type=kotlin.Boolean value=false
+    then: BLOCK type=kotlin.Unit origin=null
+      THROW type=kotlin.Nothing
+        CONSTRUCTOR_CALL 'public constructor <init> (p0: @[FlexibleNullability] kotlin.String?) declared in java.lang.IllegalArgumentException' type=java.lang.IllegalArgumentException origin=null
+          p0: CALL 'public final fun plus (other: kotlin.Any?): kotlin.String [operator] declared in kotlin.String' type=kotlin.String origin=PLUS
+            ${'$'}this: CONST String type=kotlin.String value="d.length >= 2, was "
+            other: CALL 'public final fun <get-d> (): kotlin.String? declared in <root>.A' type=kotlin.String? origin=GET_PROPERTY
+              ${'$'}this: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+""",
+            blocks[2].replace("\r\n", "\n"),
+        )
+        assertEquals(
+            """WHEN type=kotlin.Unit origin=IF
+  BRANCH
+    if: WHEN type=kotlin.Boolean origin=ANDAND
+      BRANCH
+        if: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
+          ${'$'}this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
+            arg0: CALL 'public final fun <get-d> (): kotlin.String? declared in <root>.A' type=kotlin.String? origin=GET_PROPERTY
+              ${'$'}this: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+            arg1: CONST Null type=kotlin.Nothing? value=null
+        then: CALL 'public final fun greater (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=GT
+          arg0: CALL 'public open fun <get-length> (): kotlin.Int declared in kotlin.String' type=kotlin.Int origin=GET_PROPERTY
+            ${'$'}this: CALL 'public final fun <get-d> (): kotlin.String? declared in <root>.A' type=kotlin.String? origin=GET_PROPERTY
+              ${'$'}this: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+          arg1: CONST Int type=kotlin.Int value=4
+      BRANCH
+        if: CONST Boolean type=kotlin.Boolean value=true
+        then: CONST Boolean type=kotlin.Boolean value=false
+    then: BLOCK type=kotlin.Unit origin=null
+      THROW type=kotlin.Nothing
+        CONSTRUCTOR_CALL 'public constructor <init> (p0: @[FlexibleNullability] kotlin.String?) declared in java.lang.IllegalArgumentException' type=java.lang.IllegalArgumentException origin=null
+          p0: CALL 'public final fun plus (other: kotlin.Any?): kotlin.String [operator] declared in kotlin.String' type=kotlin.String origin=PLUS
+            ${'$'}this: CONST String type=kotlin.String value="d.length <= 4, was "
+            other: CALL 'public final fun <get-d> (): kotlin.String? declared in <root>.A' type=kotlin.String? origin=GET_PROPERTY
+              ${'$'}this: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+""",
+            blocks[3].replace("\r\n", "\n")
         )
-
     }
 }
Index: kotlin-plugin/src/test/kotlin/app/softwork/validation/plugin/kotlin/class.dump
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/kotlin-plugin/src/test/kotlin/app/softwork/validation/plugin/kotlin/class.dump b/kotlin-plugin/src/test/kotlin/app/softwork/validation/plugin/kotlin/class.dump
new file mode 100644
--- /dev/null	(revision 1347b4b8305b8fb0fdfe5318593ba2effbca7473)
+++ b/kotlin-plugin/src/test/kotlin/app/softwork/validation/plugin/kotlin/class.dump	(revision 1347b4b8305b8fb0fdfe5318593ba2effbca7473)
@@ -0,0 +1,127 @@
+CLASS CLASS name:A modality:FINAL visibility:public superTypes:[kotlin.Any]
+  $this: VALUE_PARAMETER INSTANCE_RECEIVER name:<this> type:<root>.A
+  CONSTRUCTOR visibility:public <> (s:kotlin.String, d:kotlin.String?) returnType:<root>.A [primary]
+    VALUE_PARAMETER name:s index:0 type:kotlin.String
+    VALUE_PARAMETER name:d index:1 type:kotlin.String?
+    BLOCK_BODY
+      DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () [primary] declared in kotlin.Any'
+      INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:A modality:FINAL visibility:public superTypes:[kotlin.Any]'
+  PROPERTY name:s visibility:public modality:FINAL [val]
+    annotations:
+      MinLength(inclusive = 2)
+      MaxLength(inclusive = 4)
+    FIELD PROPERTY_BACKING_FIELD name:s type:kotlin.String visibility:private [final]
+      EXPRESSION_BODY
+        GET_VAR 's: kotlin.String declared in <root>.A.<init>' type=kotlin.String origin=INITIALIZE_PROPERTY_FROM_PARAMETER
+    FUN DEFAULT_PROPERTY_ACCESSOR name:<get-s> visibility:public modality:FINAL <> ($this:<root>.A) returnType:kotlin.String
+      correspondingProperty: PROPERTY name:s visibility:public modality:FINAL [val]
+      $this: VALUE_PARAMETER name:<this> type:<root>.A
+      BLOCK_BODY
+        RETURN type=kotlin.Nothing from='public final fun <get-s> (): kotlin.String declared in <root>.A'
+          GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:s type:kotlin.String visibility:private [final]' type=kotlin.String origin=null
+            receiver: GET_VAR '<this>: <root>.A declared in <root>.A.<get-s>' type=<root>.A origin=null
+  PROPERTY name:d visibility:public modality:FINAL [val]
+    annotations:
+      MinLength(inclusive = 2)
+      MaxLength(inclusive = 4)
+    FIELD PROPERTY_BACKING_FIELD name:d type:kotlin.String? visibility:private [final]
+      EXPRESSION_BODY
+        GET_VAR 'd: kotlin.String? declared in <root>.A.<init>' type=kotlin.String? origin=INITIALIZE_PROPERTY_FROM_PARAMETER
+    FUN DEFAULT_PROPERTY_ACCESSOR name:<get-d> visibility:public modality:FINAL <> ($this:<root>.A) returnType:kotlin.String?
+      correspondingProperty: PROPERTY name:d visibility:public modality:FINAL [val]
+      $this: VALUE_PARAMETER name:<this> type:<root>.A
+      BLOCK_BODY
+        RETURN type=kotlin.Nothing from='public final fun <get-d> (): kotlin.String? declared in <root>.A'
+          GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:d type:kotlin.String? visibility:private [final]' type=kotlin.String? origin=null
+            receiver: GET_VAR '<this>: <root>.A declared in <root>.A.<get-d>' type=<root>.A origin=null
+  ANONYMOUS_INITIALIZER isStatic=false
+    BLOCK_BODY
+      WHEN type=kotlin.Unit origin=IF
+        BRANCH
+          if: CALL 'public final fun less (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
+            arg0: CALL 'public open fun <get-length> (): kotlin.Int declared in kotlin.String' type=kotlin.Int origin=GET_PROPERTY
+              $this: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.A' type=kotlin.String origin=GET_PROPERTY
+                $this: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+            arg1: CONST Int type=kotlin.Int value=2
+          then: BLOCK type=kotlin.Unit origin=null
+            THROW type=kotlin.Nothing
+              CONSTRUCTOR_CALL 'public constructor <init> (p0: @[FlexibleNullability] kotlin.String?) declared in java.lang.IllegalArgumentException' type=java.lang.IllegalArgumentException origin=null
+                p0: CALL 'public final fun plus (other: kotlin.Any?): kotlin.String [operator] declared in kotlin.String' type=kotlin.String origin=PLUS
+                  $this: CONST String type=kotlin.String value="s.length >= 2, was "
+                  other: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.A' type=kotlin.String origin=GET_PROPERTY
+                    $this: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+      WHEN type=kotlin.Unit origin=IF
+        BRANCH
+          if: CALL 'public final fun greater (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=GT
+            arg0: CALL 'public open fun <get-length> (): kotlin.Int declared in kotlin.String' type=kotlin.Int origin=GET_PROPERTY
+              $this: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.A' type=kotlin.String origin=GET_PROPERTY
+                $this: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+            arg1: CONST Int type=kotlin.Int value=4
+          then: BLOCK type=kotlin.Unit origin=null
+            THROW type=kotlin.Nothing
+              CONSTRUCTOR_CALL 'public constructor <init> (p0: @[FlexibleNullability] kotlin.String?) declared in java.lang.IllegalArgumentException' type=java.lang.IllegalArgumentException origin=null
+                p0: CALL 'public final fun plus (other: kotlin.Any?): kotlin.String [operator] declared in kotlin.String' type=kotlin.String origin=PLUS
+                  $this: CONST String type=kotlin.String value="s.length <= 4, was "
+                  other: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.A' type=kotlin.String origin=GET_PROPERTY
+                    $this: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+      WHEN type=kotlin.Unit origin=IF
+        BRANCH
+          if: WHEN type=kotlin.Boolean origin=ANDAND
+            BRANCH
+              if: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
+                $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
+                  arg0: CALL 'public final fun <get-d> (): kotlin.String? declared in <root>.A' type=kotlin.String? origin=GET_PROPERTY
+                    $this: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+                  arg1: CONST Null type=kotlin.Nothing? value=null
+              then: CALL 'public final fun less (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
+                arg0: CALL 'public open fun <get-length> (): kotlin.Int declared in kotlin.String' type=kotlin.Int origin=GET_PROPERTY
+                  $this: CALL 'public final fun <get-d> (): kotlin.String? declared in <root>.A' type=kotlin.String? origin=GET_PROPERTY
+                    $this: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+                arg1: CONST Int type=kotlin.Int value=2
+            BRANCH
+              if: CONST Boolean type=kotlin.Boolean value=true
+              then: CONST Boolean type=kotlin.Boolean value=false
+          then: BLOCK type=kotlin.Unit origin=null
+            THROW type=kotlin.Nothing
+              CONSTRUCTOR_CALL 'public constructor <init> (p0: @[FlexibleNullability] kotlin.String?) declared in java.lang.IllegalArgumentException' type=java.lang.IllegalArgumentException origin=null
+                p0: CALL 'public final fun plus (other: kotlin.Any?): kotlin.String [operator] declared in kotlin.String' type=kotlin.String origin=PLUS
+                  $this: CONST String type=kotlin.String value="d.length >= 2, was "
+                  other: CALL 'public final fun <get-d> (): kotlin.String? declared in <root>.A' type=kotlin.String? origin=GET_PROPERTY
+                    $this: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+      WHEN type=kotlin.Unit origin=IF
+        BRANCH
+          if: WHEN type=kotlin.Boolean origin=ANDAND
+            BRANCH
+              if: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
+                $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
+                  arg0: CALL 'public final fun <get-d> (): kotlin.String? declared in <root>.A' type=kotlin.String? origin=GET_PROPERTY
+                    $this: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+                  arg1: CONST Null type=kotlin.Nothing? value=null
+              then: CALL 'public final fun greater (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=GT
+                arg0: CALL 'public open fun <get-length> (): kotlin.Int declared in kotlin.String' type=kotlin.Int origin=GET_PROPERTY
+                  $this: CALL 'public final fun <get-d> (): kotlin.String? declared in <root>.A' type=kotlin.String? origin=GET_PROPERTY
+                    $this: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+                arg1: CONST Int type=kotlin.Int value=4
+            BRANCH
+              if: CONST Boolean type=kotlin.Boolean value=true
+              then: CONST Boolean type=kotlin.Boolean value=false
+          then: BLOCK type=kotlin.Unit origin=null
+            THROW type=kotlin.Nothing
+              CONSTRUCTOR_CALL 'public constructor <init> (p0: @[FlexibleNullability] kotlin.String?) declared in java.lang.IllegalArgumentException' type=java.lang.IllegalArgumentException origin=null
+                p0: CALL 'public final fun plus (other: kotlin.Any?): kotlin.String [operator] declared in kotlin.String' type=kotlin.String origin=PLUS
+                  $this: CONST String type=kotlin.String value="d.length <= 4, was "
+                  other: CALL 'public final fun <get-d> (): kotlin.String? declared in <root>.A' type=kotlin.String? origin=GET_PROPERTY
+                    $this: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+  FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN <> ($this:kotlin.Any, other:kotlin.Any?) returnType:kotlin.Boolean [fake_override,operator]
+    overridden:
+      public open fun equals (other: kotlin.Any?): kotlin.Boolean [operator] declared in kotlin.Any
+    $this: VALUE_PARAMETER name:<this> type:kotlin.Any
+    VALUE_PARAMETER name:other index:0 type:kotlin.Any?
+  FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.Int [fake_override]
+    overridden:
+      public open fun hashCode (): kotlin.Int declared in kotlin.Any
+    $this: VALUE_PARAMETER name:<this> type:kotlin.Any
+  FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.String [fake_override]
+    overridden:
+      public open fun toString (): kotlin.String declared in kotlin.Any
+    $this: VALUE_PARAMETER name:<this> type:kotlin.Any
Index: kotlin-plugin/src/test/kotlin/app/softwork/validation/plugin/kotlin/classConstructor.dump
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/kotlin-plugin/src/test/kotlin/app/softwork/validation/plugin/kotlin/classConstructor.dump b/kotlin-plugin/src/test/kotlin/app/softwork/validation/plugin/kotlin/classConstructor.dump
new file mode 100644
--- /dev/null	(revision 1347b4b8305b8fb0fdfe5318593ba2effbca7473)
+++ b/kotlin-plugin/src/test/kotlin/app/softwork/validation/plugin/kotlin/classConstructor.dump	(revision 1347b4b8305b8fb0fdfe5318593ba2effbca7473)
@@ -0,0 +1,82 @@
+CONSTRUCTOR visibility:public <> (s:kotlin.String, d:kotlin.String?) returnType:<root>.A [primary]
+  VALUE_PARAMETER name:s index:0 type:kotlin.String
+  VALUE_PARAMETER name:d index:1 type:kotlin.String?
+  BLOCK_BODY
+    DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () [primary] declared in kotlin.Any'
+  BLOCK_BODY
+    WHEN type=kotlin.Unit origin=IF
+      BRANCH
+        if: CALL 'public final fun less (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
+          arg0: CALL 'public open fun <get-length> (): kotlin.Int declared in kotlin.String' type=kotlin.Int origin=GET_PROPERTY
+            $this: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.A' type=kotlin.String origin=GET_PROPERTY
+              $this: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+          arg1: CONST Int type=kotlin.Int value=2
+        then: BLOCK type=kotlin.Unit origin=null
+          THROW type=kotlin.Nothing
+            CONSTRUCTOR_CALL 'public constructor <init> (p0: @[FlexibleNullability] kotlin.String?) declared in java.lang.IllegalArgumentException' type=java.lang.IllegalArgumentException origin=null
+              p0: CALL 'public final fun plus (other: kotlin.Any?): kotlin.String [operator] declared in kotlin.String' type=kotlin.String origin=PLUS
+                $this: CONST String type=kotlin.String value="s.length >= 2, was "
+                other: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.A' type=kotlin.String origin=GET_PROPERTY
+                  $this: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+    WHEN type=kotlin.Unit origin=IF
+      BRANCH
+        if: CALL 'public final fun greater (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=GT
+          arg0: CALL 'public open fun <get-length> (): kotlin.Int declared in kotlin.String' type=kotlin.Int origin=GET_PROPERTY
+            $this: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.A' type=kotlin.String origin=GET_PROPERTY
+              $this: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+          arg1: CONST Int type=kotlin.Int value=4
+        then: BLOCK type=kotlin.Unit origin=null
+          THROW type=kotlin.Nothing
+            CONSTRUCTOR_CALL 'public constructor <init> (p0: @[FlexibleNullability] kotlin.String?) declared in java.lang.IllegalArgumentException' type=java.lang.IllegalArgumentException origin=null
+              p0: CALL 'public final fun plus (other: kotlin.Any?): kotlin.String [operator] declared in kotlin.String' type=kotlin.String origin=PLUS
+                $this: CONST String type=kotlin.String value="s.length <= 4, was "
+                other: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.A' type=kotlin.String origin=GET_PROPERTY
+                  $this: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+    WHEN type=kotlin.Unit origin=IF
+      BRANCH
+        if: WHEN type=kotlin.Boolean origin=ANDAND
+          BRANCH
+            if: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
+              $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
+                arg0: CALL 'public final fun <get-d> (): kotlin.String? declared in <root>.A' type=kotlin.String? origin=GET_PROPERTY
+                  $this: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+                arg1: CONST Null type=kotlin.Nothing? value=null
+            then: CALL 'public final fun less (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
+              arg0: CALL 'public open fun <get-length> (): kotlin.Int declared in kotlin.String' type=kotlin.Int origin=GET_PROPERTY
+                $this: CALL 'public final fun <get-d> (): kotlin.String? declared in <root>.A' type=kotlin.String? origin=GET_PROPERTY
+                  $this: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+              arg1: CONST Int type=kotlin.Int value=2
+          BRANCH
+            if: CONST Boolean type=kotlin.Boolean value=true
+            then: CONST Boolean type=kotlin.Boolean value=false
+        then: BLOCK type=kotlin.Unit origin=null
+          THROW type=kotlin.Nothing
+            CONSTRUCTOR_CALL 'public constructor <init> (p0: @[FlexibleNullability] kotlin.String?) declared in java.lang.IllegalArgumentException' type=java.lang.IllegalArgumentException origin=null
+              p0: CALL 'public final fun plus (other: kotlin.Any?): kotlin.String [operator] declared in kotlin.String' type=kotlin.String origin=PLUS
+                $this: CONST String type=kotlin.String value="d.length >= 2, was "
+                other: CALL 'public final fun <get-d> (): kotlin.String? declared in <root>.A' type=kotlin.String? origin=GET_PROPERTY
+                  $this: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+    WHEN type=kotlin.Unit origin=IF
+      BRANCH
+        if: WHEN type=kotlin.Boolean origin=ANDAND
+          BRANCH
+            if: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
+              $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
+                arg0: CALL 'public final fun <get-d> (): kotlin.String? declared in <root>.A' type=kotlin.String? origin=GET_PROPERTY
+                  $this: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+                arg1: CONST Null type=kotlin.Nothing? value=null
+            then: CALL 'public final fun greater (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=GT
+              arg0: CALL 'public open fun <get-length> (): kotlin.Int declared in kotlin.String' type=kotlin.Int origin=GET_PROPERTY
+                $this: CALL 'public final fun <get-d> (): kotlin.String? declared in <root>.A' type=kotlin.String? origin=GET_PROPERTY
+                  $this: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+              arg1: CONST Int type=kotlin.Int value=4
+          BRANCH
+            if: CONST Boolean type=kotlin.Boolean value=true
+            then: CONST Boolean type=kotlin.Boolean value=false
+        then: BLOCK type=kotlin.Unit origin=null
+          THROW type=kotlin.Nothing
+            CONSTRUCTOR_CALL 'public constructor <init> (p0: @[FlexibleNullability] kotlin.String?) declared in java.lang.IllegalArgumentException' type=java.lang.IllegalArgumentException origin=null
+              p0: CALL 'public final fun plus (other: kotlin.Any?): kotlin.String [operator] declared in kotlin.String' type=kotlin.String origin=PLUS
+                $this: CONST String type=kotlin.String value="d.length <= 4, was "
+                other: CALL 'public final fun <get-d> (): kotlin.String? declared in <root>.A' type=kotlin.String? origin=GET_PROPERTY
+                  $this: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
Index: kotlin-plugin/src/test/kotlin/app/softwork/validation/plugin/kotlin/gen.dump
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/kotlin-plugin/src/test/kotlin/app/softwork/validation/plugin/kotlin/gen.dump b/kotlin-plugin/src/test/kotlin/app/softwork/validation/plugin/kotlin/gen.dump
new file mode 100644
--- /dev/null	(revision 1347b4b8305b8fb0fdfe5318593ba2effbca7473)
+++ b/kotlin-plugin/src/test/kotlin/app/softwork/validation/plugin/kotlin/gen.dump	(revision 1347b4b8305b8fb0fdfe5318593ba2effbca7473)
@@ -0,0 +1,86 @@
+CONSTRUCTOR visibility:public <> (s:kotlin.String, d:kotlin.String?) returnType:<root>.A [primary]
+  VALUE_PARAMETER name:s index:0 type:kotlin.String
+  VALUE_PARAMETER name:d index:1 type:kotlin.String?
+  BLOCK_BODY
+    DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () [primary] declared in kotlin.Any'
+  BLOCK type=kotlin.Unit origin=SYNTHESIZED_INIT_BLOCK
+        WHEN type=kotlin.Unit origin=IF
+          BRANCH
+            if: CALL 'public final fun less (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
+              arg0: CALL 'public open fun <get-length> (): kotlin.Int declared in kotlin.String' type=kotlin.Int origin=GET_PROPERTY
+                $this: GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:s type:kotlin.String visibility:private [final]' type=kotlin.String origin=null
+                  receiver: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+              arg1: CONST Int type=kotlin.Int value=2
+            then: BLOCK type=kotlin.Unit origin=null
+              THROW type=kotlin.Nothing
+                CONSTRUCTOR_CALL 'public constructor <init> (p0: @[FlexibleNullability] kotlin.String?) declared in java.lang.IllegalArgumentException' type=java.lang.IllegalArgumentException origin=null
+                  p0: CALL 'public final fun toString (): kotlin.String declared in java.lang.StringBuilder' type=kotlin.String origin=null
+                    $this: CALL 'public final fun append (value: kotlin.String?): java.lang.StringBuilder declared in java.lang.StringBuilder' type=java.lang.StringBuilder origin=null
+                      $this: CALL 'public final fun append (value: kotlin.String?): java.lang.StringBuilder declared in java.lang.StringBuilder' type=java.lang.StringBuilder origin=null
+                        $this: CONSTRUCTOR_CALL 'public constructor <init> () declared in java.lang.StringBuilder' type=java.lang.StringBuilder origin=null
+                        value: CONST String type=kotlin.String value="s.length >= 2, was "
+                      value: GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:s type:kotlin.String visibility:private [final]' type=kotlin.String origin=null
+                        receiver: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+        WHEN type=kotlin.Unit origin=IF
+          BRANCH
+            if: CALL 'public final fun greater (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=GT
+              arg0: CALL 'public open fun <get-length> (): kotlin.Int declared in kotlin.String' type=kotlin.Int origin=GET_PROPERTY
+                $this: GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:s type:kotlin.String visibility:private [final]' type=kotlin.String origin=null
+                  receiver: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+              arg1: CONST Int type=kotlin.Int value=4
+            then: BLOCK type=kotlin.Unit origin=null
+              THROW type=kotlin.Nothing
+                CONSTRUCTOR_CALL 'public constructor <init> (p0: @[FlexibleNullability] kotlin.String?) declared in java.lang.IllegalArgumentException' type=java.lang.IllegalArgumentException origin=null
+                  p0: CALL 'public final fun toString (): kotlin.String declared in java.lang.StringBuilder' type=kotlin.String origin=null
+                    $this: CALL 'public final fun append (value: kotlin.String?): java.lang.StringBuilder declared in java.lang.StringBuilder' type=java.lang.StringBuilder origin=null
+                      $this: CALL 'public final fun append (value: kotlin.String?): java.lang.StringBuilder declared in java.lang.StringBuilder' type=java.lang.StringBuilder origin=null
+                        $this: CONSTRUCTOR_CALL 'public constructor <init> () declared in java.lang.StringBuilder' type=java.lang.StringBuilder origin=null
+                        value: CONST String type=kotlin.String value="s.length <= 4, was "
+                      value: GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:s type:kotlin.String visibility:private [final]' type=kotlin.String origin=null
+                        receiver: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+        WHEN type=kotlin.Unit origin=IF
+          BRANCH
+            if: CALL 'public final fun ANDAND (arg0: kotlin.Boolean, arg1: kotlin.Boolean): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=null
+              arg0: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
+                $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
+                  arg0: GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:d type:kotlin.String? visibility:private [final]' type=kotlin.String? origin=null
+                    receiver: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+                  arg1: CONST Null type=kotlin.Nothing? value=null
+              arg1: CALL 'public final fun less (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
+                arg0: CALL 'public open fun <get-length> (): kotlin.Int declared in kotlin.String' type=kotlin.Int origin=GET_PROPERTY
+                  $this: GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:d type:kotlin.String? visibility:private [final]' type=kotlin.String? origin=null
+                    receiver: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+                arg1: CONST Int type=kotlin.Int value=2
+            then: BLOCK type=kotlin.Unit origin=null
+              THROW type=kotlin.Nothing
+                CONSTRUCTOR_CALL 'public constructor <init> (p0: @[FlexibleNullability] kotlin.String?) declared in java.lang.IllegalArgumentException' type=java.lang.IllegalArgumentException origin=null
+                  p0: CALL 'public final fun toString (): kotlin.String declared in java.lang.StringBuilder' type=kotlin.String origin=null
+                    $this: CALL 'public final fun append (value: kotlin.String?): java.lang.StringBuilder declared in java.lang.StringBuilder' type=java.lang.StringBuilder origin=null
+                      $this: CALL 'public final fun append (value: kotlin.String?): java.lang.StringBuilder declared in java.lang.StringBuilder' type=java.lang.StringBuilder origin=null
+                        $this: CONSTRUCTOR_CALL 'public constructor <init> () declared in java.lang.StringBuilder' type=java.lang.StringBuilder origin=null
+                        value: CONST String type=kotlin.String value="d.length >= 2, was "
+                      value: GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:d type:kotlin.String? visibility:private [final]' type=kotlin.String? origin=null
+                        receiver: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+        WHEN type=kotlin.Unit origin=IF
+          BRANCH
+            if: CALL 'public final fun ANDAND (arg0: kotlin.Boolean, arg1: kotlin.Boolean): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=null
+              arg0: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
+                $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
+                  arg0: GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:d type:kotlin.String? visibility:private [final]' type=kotlin.String? origin=null
+                    receiver: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+                  arg1: CONST Null type=kotlin.Nothing? value=null
+              arg1: CALL 'public final fun greater (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=GT
+                arg0: CALL 'public open fun <get-length> (): kotlin.Int declared in kotlin.String' type=kotlin.Int origin=GET_PROPERTY
+                  $this: GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:d type:kotlin.String? visibility:private [final]' type=kotlin.String? origin=null
+                    receiver: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
+                arg1: CONST Int type=kotlin.Int value=4
+            then: BLOCK type=kotlin.Unit origin=null
+              THROW type=kotlin.Nothing
+                CONSTRUCTOR_CALL 'public constructor <init> (p0: @[FlexibleNullability] kotlin.String?) declared in java.lang.IllegalArgumentException' type=java.lang.IllegalArgumentException origin=null
+                  p0: CALL 'public final fun toString (): kotlin.String declared in java.lang.StringBuilder' type=kotlin.String origin=null
+                    $this: CALL 'public final fun append (value: kotlin.String?): java.lang.StringBuilder declared in java.lang.StringBuilder' type=java.lang.StringBuilder origin=null
+                      $this: CALL 'public final fun append (value: kotlin.String?): java.lang.StringBuilder declared in java.lang.StringBuilder' type=java.lang.StringBuilder origin=null
+                        $this: CONSTRUCTOR_CALL 'public constructor <init> () declared in java.lang.StringBuilder' type=java.lang.StringBuilder origin=null
+                        value: CONST String type=kotlin.String value="d.length <= 4, was "
+                      value: GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:d type:kotlin.String? visibility:private [final]' type=kotlin.String? origin=null
+                        receiver: GET_VAR '<this>: <root>.A declared in <root>.A' type=<root>.A origin=null
